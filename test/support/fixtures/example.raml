#%RAML 1.0
---
title: Example API
version: 1.0
baseUri: http://localhost:{port}

documentation:
  - title: About
    content: |
      This API documents the example server that can be used during tests.

baseUriParameters:
  port:
    type: integer
    minimum: 1024
    maximum: 65535
    default: 4567

securitySchemes:
  oauth_2_0:
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
            Used to send a valid OAuth 2 access token. Do not use together with
            the "access_token" query string parameter.
      queryParameters:
        access_token:
          description: |
            Used to send a valid OAuth 2 access token. Do not use together with
            the "Authorization" header
      responses:
        401:
          description: Unauthorized
    settings:
      authorizationUri: https://localhost:4567/auth/oauth2/authorize
      accessTokenUri: https://localhost:4567/auth/oauth2/access_token
      authorizationGrants: [ authorization_code, implicit, password, client_credentials ]
      scopes: [ user ]

traits:
  success:
    responses:
      200:
        body:
          "text/html":
            example: Success
  name:
    description: |
      Respond by saying "Hello" back to the user.
    queryParameters:
      name:
        type: string
        default: World
  helloWorld:
    responses:
      200:
        body:
          "text/html":
            example: |
              Hello World!

resourceTypes:
  methods:
    description: Implements all RESTful request verbs.
    get:
    put:
    post:
    patch:
    delete:

# Handle the root resource.
/:
  get:
    is: [ success ]
    description: |
      Make a request against the root resource.

# Stream a file to the user.
/stream:
  get:
    description: |
      Responds with a stream of lorem ipsum text.
    responses:
      200:
        body:
          "text/html":
             example: Lorem ipsum...

# Respond with a status code and "Success".
/status/{statusCode}:
  uriParameters:
    statusCode:
      type: integer
      minimum: 100
      maximum: 599
  get:
    is: [ success ]
    description: |
      Responds to a GET request with the status code given on the path.
  post:
    is: [ success ]
    description: |
      Responds to a POST request by bouncing the request body back to the
      user, using the status code given on the path.
  put:
    is: [ success ]
    description: |
      Responds to a PUT request by bouncing the request body back to the
      user, using the status code given on the path.
  patch:
    is: [ success ]
    description: |
      Responds to a PATCH request by bouncing the request body back to the
      user, using the status code given on the path.
  delete:
    is: [ success ]
    description: |
      Responds to a DELETE request by bouncing the request body back to the
      user, using the status code given on the path.

# Say hello.
/hello:
  get:
    is: [ name, helloWorld ]
  put:
    is: [ name, helloWorld ]
  post:
    is: [ name, helloWorld ]
  patch:
    is: [ name, helloWorld ]
  delete:
    is: [ name, helloWorld ]

# Bounce request parameters.
/bounce:
  /url:
    type: methods
    description: Bounce the URL of API requests back to the user.
  /body:
    type: methods
    description: Bounce the body of API requests back to the user.
  /headers:
    type: methods
    description: Bounce the headers of the API request back to the user.
  /parameter/{variable}:
    type: methods

# Set defaults.
/defaults:
  /headers:
    type: methods
    get:
      headers:
        X-Default-Header:
          type: string
          default: Hello World!
  /parameter:
    /{variable}:
      type: methods
      uriParameters:
        variable:
          type: string
          default: default

# Handle uri parameters.
/parameters:
  /single:
    /{id}:
      type: methods
  /prefix:
    /one{id}:
      type: methods
    /three{a}{b}{c}:
      type: methods

# Handle extensions.
/extensions:
  /static.json:
    type: methods
  /media-type:
    /enum{mediaTypeExtension}:
      uriParameters:
        mediaTypeExtension:
          enum: [.json, .xml]
      type: methods
    /basic{mediaTypeExtension}:
      type: methods

# Handle conflicting routes.
/conflicts:
  /media-type:
    /route:
      type: methods
  /media-type{mediaTypeExtension}:
    type: methods

/responses:
  /text:
    type: methods
  /json:
    type: methods
  /url-encoded:
    /basic:
      type: methods
    /duplicate:
      type: methods
    /escaped:
      type: methods
